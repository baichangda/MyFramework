buildscript {
    ext {
        aliyunPublic = 'https://maven.aliyun.com/repository/public'
    }
    repositories {
        mavenLocal()
        maven { url "${aliyunPublic}" }
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-gradle-plugin
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "3.2.12"
    }
}


subprojects {
    if (it.name == 'Lib-Bom') {
        return
    }

    group 'cn.bcd'
    version '1.0'

    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'idea'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenLocal()
        maven { url "${aliyunPublic}" }
        mavenCentral()
    }


    //统一配置lombok
    dependencies {
        var lombokVersion = '1.18.36'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    }

    //下载源码和文档
    //gradle cleanIdea idea
    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    //生成jar时打包源码
    tasks.register('sourceJar', Jar) {
        from sourceSets.main.java.srcDirs
        archiveClassifier = "sources"
    }

    test {
        useJUnitPlatform()
    }


    //在项目build.gradle执行完毕后、判断是否是springboot项目、设置bootRun和bootJar
    //在此回调中无法添加修改依赖、但是排除依赖是有效的
    //插件无法在回调中添加、修改、删除
    afterEvaluate {
        if (it.name == 'Lib-Bom') {
            return
        }
        //判断是否包含springboot依赖、有则引入springboot插件
        def isSpringBootApplication = project.plugins.hasPlugin("org.springframework.boot")
        def isLib = project.name.startsWith("Lib-")
        println("---------project[${project.name}] isLib[{${isLib}] isSpringBootApplication[${isSpringBootApplication}]")
        if (isSpringBootApplication) {
            //统一配置排除spring logback包、使用log4j2
            configurations.configureEach {
                //去除springboot默认的logback
                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
                exclude module: 'logback-classic'
                exclude module: 'logback-core'
                //指定快照jar的更新策略
                resolutionStrategy {
                    //缓存依赖时间、0代表不缓存
                    cacheChangingModulesFor 0, 'seconds'
                }
            }
            //统一配置springboot应用的bootJar和bootRun
            if (isLib) {
                bootJar {
                    enabled = false
                }
                bootRun {
                    enabled = false
                }
            } else {
                bootJar {
                    exclude "**/application-local.yml"
                    manifest {
                        attributes 'Start-Class': 'cn.bcd.Application'
                    }
                    //指定jar文件的名称
                    archiveBaseName = "${project.name}"
                    version = ""
                }
                bootRun {
                    /**
                     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
                     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
                     */
                    if (project.hasProperty('jvmArgs')) {
                        jvmArgs(project.jvmArgs.split("\\s+") as List)
                    }
                    //这些参数在bootJar中不会生效、如果需要添加、则在java -jar后面加上、必须紧接着-jar
                    //开启缓存行补齐
                    jvmArgs('-XX:-RestrictContended')
                    jvmArgs('-Dfile.encoding=UTF-8')
                    jvmArgs('-Dsun.jnu.encoding=UTF-8')
                    jvmArgs('--add-opens=java.base/java.nio=ALL-UNNAMED')
                    jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED')
                    jvmArgs('--add-opens=java.base/java.lang.reflect=ALL-UNNAMED')
                }
            }

        }
    }
}







