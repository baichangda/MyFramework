buildscript {
    ext {
        aliyunPublic = 'https://maven.aliyun.com/repository/public'
    }
    repositories {
        mavenLocal()
        maven { url "${aliyunPublic}" }
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-gradle-plugin
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "3.2.12"
    }
}


subprojects {
    if (it.name == 'Lib-Bom') {
        return
    }

    group 'cn.bcd'
    version '1.0'

    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'idea'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenLocal()
        maven { url "${aliyunPublic}" }
        mavenCentral()
    }

    configurations.configureEach {
        //去除springboot默认的logback
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: 'logback-classic'
        exclude module: 'logback-core'
        //指定快照jar的更新策略
        resolutionStrategy {
            //缓存依赖时间、0代表不缓存
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    dependencies {
        var lombokVersion='1.18.36'
        compileOnly group: 'org.projectlombok', name: 'lombok',version: "${lombokVersion}"
        annotationProcessor group: 'org.projectlombok', name: 'lombok',version: "${lombokVersion}"
    }

    //下载源码和文档
    //gradle cleanIdea idea
    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    //生成jar时打包源码
    tasks.register('sourceJar', Jar) {
        from sourceSets.main.java.srcDirs
        archiveClassifier = "sources"
    }

    test {
        useJUnitPlatform()
    }

}







