buildscript {
    ext {
        aliyunPublic = 'https://maven.aliyun.com/repository/public'
    }
    repositories {
        mavenLocal()
        maven { url = "${aliyunPublic}" }
        mavenCentral()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-gradle-plugin
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "3.5.6"
    }
}

subprojects {
    if (it.name == 'Bom') {
        return
    }

    ext {
        jarName = "${project.name}"
    }

    group = 'cn.bcd'
    version = '1.0'

    apply plugin: 'java-library'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.springframework.boot"

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenLocal()
        maven { url = "${aliyunPublic}" }
        mavenCentral()
    }

    //统一配置排除spring logback包、使用log4j2
    configurations.configureEach {
        //去除springboot默认的logback
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: 'logback-classic'
        exclude module: 'logback-core'
        //指定快照jar的更新策略
        resolutionStrategy {
            //缓存依赖时间、0代表不缓存
            cacheChangingModulesFor 0, 'seconds'
        }
    }

    dependencies {
        //统一配置lombok
        var lombokVersion = '1.18.42'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

        //统一配置mapstruct
        var mapstructVersion = '1.6.3'
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        //统一配置测试环境
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
        testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-launcher'
        testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl'
    }

    //下载源码和文档
    //gradle cleanIdea idea
    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    //生成jar时打包源码
    tasks.register('sourceJar', Jar) {
        from sourceSets.main.java.srcDirs
        archiveClassifier = "sources"
    }

    test {
        useJUnitPlatform()
    }


    afterEvaluate {
        def isLib = project.name.startsWith("Lib-")
        if (isLib) {
            jar {
                /**
                 * 默认lib打包采用此方式
                 * 设置如下属性保证打包出来的jar文件名、去掉名称中的后缀、例如-1.0-plain
                 */
                archiveBaseName = "${jarName}"
                archiveClassifier = ""
            }
            bootJar {
                enabled = false
                /**
                 如果需要使用bootJar打包lib、则首先在模块build.gradle头加入
                 apply plugin: "org.springframework.boot"
                 apply plugin: "io.spring.dependency-management"
                 然后在这里开启bootJar 、 同时设置manifest
                 */
//                    enabled = true
//                    manifest {
//                        attributes 'Start-Class': ''
//                    }
            }
            bootRun {
                enabled = false
            }
        } else {
            bootJar {
                exclude "**/application-local.yml"
                manifest {
                    attributes 'Start-Class': 'cn.bcd.Application'
                }
                //指定jar文件的名称
                archiveBaseName = "${jarName}"
            }

//            // 将依赖包复制到lib目录
//            tasks.register('copyJar', Copy) {
//                // lib目录的清除和复制任务
//                def dir = getLayout().getBuildDirectory().get()
//                delete "$dir\\libs\\lib"
//                from configurations.runtimeClasspath
//                into "$dir\\libs\\lib"
//            }
//
//            //分离式打包
//            bootJar {
//                var moduleJars = []
//                var externalJars = []
//                for (final def e in configurations.runtimeClasspath.files) {
//                    if (e.name.startsWith("Lib-")) {
//                        moduleJars.add(e.name)
//                    } else {
//                        externalJars.add(e.name)
//                    }
//                }
//                // 排除所有的jar
//                excludes = ["**/application-local.yml"]
//                excludes.addAll(externalJars)
//                // lib目录的清除和复制任务、排除复制的jar
//                copyJar.exclude(moduleJars)
//                dependsOn copyJar
//                // 指定依赖包的路径
//                manifest {
//                    attributes 'Start-Class': 'cn.bcd.Application'
//                    attributes "Manifest-Version": 1.0,
//                            'Class-Path': externalJars.collect { "lib/$it" }.join(' ')
//                }
//                //指定jar文件的名称
//                archiveBaseName = "${jarName}"
//            }


            bootRun {
                //这些参数在bootJar中不会生效、如果需要添加、则在java -jar后面加上、必须紧接着-jar
                //开启缓存行补齐
                jvmArgs([
                        '-XX:-RestrictContended',
                        '-Dfile.encoding=UTF-8',
                        '-Dsun.jnu.encoding=UTF-8',
                        '--add-opens=java.base/java.nio=ALL-UNNAMED',
                        '--add-opens=java.base/java.lang=ALL-UNNAMED',
                        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
                ])
            }
        }
    }
}