apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"


dependencies {
    api project(":Lib-Base-Json")
    //springboot支持
    api("org.springframework.boot:spring-boot-starter")
    api("org.springframework.boot:spring-boot-configuration-processor")
    api("org.springframework.boot:spring-boot-starter-aop")
    // https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-openapi3-jakarta-spring-boot-starter
    api group: 'com.github.xiaoymin', name: 'knife4j-openapi3-jakarta-spring-boot-starter'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-consul-discovery
    api group: 'org.springframework.cloud', name: 'spring-cloud-loadbalancer'
    api group: 'com.alibaba.cloud', name: 'spring-cloud-starter-alibaba-nacos-discovery'
    //引入feign支持
    api 'org.springframework.cloud:spring-cloud-starter-openfeign'

    //springboot log4j2支持
    api('org.springframework.boot:spring-boot-starter-log4j2')
}

bootJar {
    exclude "**/*-dev.yml"
    exclude "**/*-test.yml"
    manifest {
        attributes 'Start-Class': 'cn.bcd.Application'
    }
    //指定jar文件的名称
    archiveBaseName = "${project.name}"
    version = ""
}

bootRun {
    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    if (project.hasProperty('jvmArgs')) {
        jvmArgs(project.jvmArgs.split("\\s+") as List)
    }
    //这些参数在bootJar中不会生效、如果需要添加、则在java -jar后面加上、必须紧接着-jar
    //开启缓存行补齐
    jvmArgs('-XX:-RestrictContended')
    jvmArgs('-Dfile.encoding=UTF-8')
    jvmArgs('-Dsun.jnu.encoding=UTF-8')
    jvmArgs('--add-opens=java.base/java.nio=ALL-UNNAMED')
}